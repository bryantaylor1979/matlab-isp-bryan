function [ImageDir,Source]=HtmlThumbReport2Exel(ReportDir,BackupDir,BaseRelDir,Uniq,OnlyFaces,hDisplay)


SmlIconSize=72;
CopyFile='Skip';
CopyThumb='Skip';

f=strfind(BackupDir(1:end-1),'\'); % take the last dir in the tree as the backup rel Base
if ~isempty(f)
    BackupBase=BackupDir(f(end)+1:end);
end

%parse a report generated by decPicasaViewer 1.6
if ReportDir(end)== '\';
    ReportDir=ReportDir(1:end-1);
end
[DB,Source]=ParseHTMLDB([ReportDir,'\Report.html']);
%ReportDir='C:\Public\BRCM\RND\SV5\FT\Tools\Mat DB\report\';
%  FaceS.FaceDat=[];
%  FileS.ImgFiles=[];

for i=1:length(DB); %for each thumbnil in the report file
    
    [pathstr, name, ext] = fileparts(DB{i}.FileName);
    
    
    [ImgDat, FaceDat]=InitXlsStruct();
    ImgDat.NoOfFaces=0;
    
    FaceImg=0;
    ImgSize=[];
    ThumSize=[];
    
    ImgDat.FileName=[name,ext];
    ImgDat.Dir=pathstr;
    

    if isfield(DB{i},'Thumb') % take only the first thumbnail that is the bigest, and the smallest
        ImgDat.ThumbFile=DB{i}.Thumb(1).File(3:end);
        ImgDat.ThumbX=str2num(DB{i}.Thumb(1).Width);
        ImgDat.ThumbY=str2num(DB{i}.Thumb(1).Height);
        ImgDat.ThumbDir=ReportDir;
        ThumSize(2)=ImgDat.ThumbX;
        ThumSize(1)=ImgDat.ThumbY;
        if length(DB{i}.Thumb)>1 % we have smaller thumnails
            ImgDat.SmlThumbFile=DB{i}.Thumb(end).File(3:end);
            ImgDat.SmlThumbX=str2num(DB{i}.Thumb(end).Width);
            ImgDat.SmlThumbY=str2num(DB{i}.Thumb(end).Height);
            ImgDat.SmlThumbDir=ReportDir;
            
        else
            ImgDat.SmlThumbFile=ImgDat.ThumbFile;
            ImgDat.SmlThumbX=ImgDat.ThumbX;
            ImgDat.SmlThumbY=ImgDat.ThumbY;
            ImgDat.SmlThumbDir=ImgDat.ThumbDir;
            
        end
    end
    
    
    
    for j=1:length( DB{i}.Param)
        CurrParam=DB{i}.Param(j);
        switch (CurrParam.Name)
            case 'facerect'
                if CurrParam.Decode.Box(3)>0 && CurrParam.Decode.Box(4)>0
                    FaceDat=UpdateFaceRect(FaceDat,CurrParam.Decode.Box,ImgSize);
                end
                
            case 'facerectdata';
                if isfield(CurrParam.Decode,'leye')
                    FaceImg=1;
                    FaceDat=UpdateFaceInfo(FaceDat,CurrParam.Decode,ImgSize);
                end
            case 'facequality'
                FaceDat.FaceQuality=CurrParam.Val;
            case 'Width'
                ImgSize(2)=str2num(CurrParam.Val);
                ImgDat.SizeX=ImgSize(2);
            case 'Height'
                ImgSize(1)=str2num(CurrParam.Val);
                ImgDat.SizeY=ImgSize(1);
        end
    end % Param loop
    
    if FaceImg==1 % it is a fec image
        FaceDat.FileName=ImgDat.FileName;
        FaceDat.Dir=ImgDat.Dir;
        FaceDat.SizeX=ImgDat.SizeX;
        FaceDat.SizeY=ImgDat.SizeY;
        FaceDat.ThumbFile=ImgDat.ThumbFile;
        FaceDat.ThumbDir=ImgDat.ThumbDir;
        FaceDat.ThumbX=ImgDat.ThumbX;
        FaceDat.ThumbY=ImgDat.ThumbY;
        
        FaceDat.SmlThumbFile =ImgDat.SmlThumbFile;
        FaceDat.SmlThumbX =ImgDat.SmlThumbX;
        FaceDat.SmlThumbY =ImgDat.SmlThumbY;
        FaceDat.SmlThumbDir =ImgDat.SmlThumbDir;
        if  ~exist('FaceS','var')
            FaceS.FaceDat(1)=FaceDat;
        else
            FaceS.FaceDat(end+1)=FaceDat;
        end
        
    else
        
        if ~exist('FileS','var')
            FileS.ImgFiles(1)=ImgDat;
        else
            FileS.ImgFiles(end+1)=ImgDat;
        end
        
        
    end
end


% for i=2:length(FileS.ImgFiles)
%     if ~strcmp(FileS.ImgFiles(1).Dir,FileS.ImgFiles(i).Dir)
%             errordlg('Report contains images from multiple directories - no DB will be generated','HTML Reporrt Error');
%             return
%
%     end
% end
ImageDir=FileS.ImgFiles(1).Dir;

if ~exist('FaceS','var')
    errordlg('No Fces in HTML Report - no DB will be generated','HTML Reporrt Error');
    return
end

FaceList=[];
for i=1:length(FileS.ImgFiles)
    for j=1:length(FaceS.FaceDat)
        if strcmp(FaceS.FaceDat(j).FileName,FileS.ImgFiles(i).FileName)
            FileS.ImgFiles(i).NoOfFaces = FileS.ImgFiles(i).NoOfFaces+1;
            
        end
    end
    if ( FileS.ImgFiles(i).NoOfFaces>0 )
        FaceList=[FaceList;i];
    end
end


if OnlyFaces
    FileS.ImgFiles=FileS.ImgFiles(FaceList);
end

idx=0;
for i=1:length(FileS.ImgFiles)
    idx=idx+1;
    FileFullPath=FileS.ImgFiles(idx).Dir;
    [ImagrRelPath]=CreateRelPath(FileFullPath,BaseRelDir,Uniq);
    ThumbRelPath=[ImagrRelPath,'\Thumb'];
    if ~isdir([BackupDir,'\',ThumbRelPath]);
        mkdir([BackupDir,'\',ThumbRelPath]);
    end
    
    if ~strcmp(CopyFile(1:4),'Alwa')
        if exist([BackupDir,'\',ImagrRelPath,'\',FileS.ImgFiles(idx).FileName],'file')
            CopyFile=questdlg(sprintf('Image %s already exist in DB, over write exisitnig DB image?',FileS.ImgFiles(idx).FileName),...
                'Copying Image Files','Skip','Overwrite','Always','Skip');
            if strcmp(CopyFile(1:4),'Alwa')
                CopyFile=questdlg(sprintf('Image %s already exist in DB, over write exisitnig DB image?',FileS.ImgFiles(idx).FileName),...
                'Copying Image Files','Always Skip','Always Overwrite','Skip');
            end
        else
            CopyFile='Overwrite'; %if there is no file create it
        end
    end
    
    if strcmp(CopyFile,'Overwrite') || strcmp(CopyFile,'Always Overwrite')
        copyfile([FileFullPath,'\',FileS.ImgFiles(idx).FileName],[BackupDir,'\',ImagrRelPath,'\',FileS.ImgFiles(idx).FileName]);
    end
    
    FileS.ImgFiles(idx).Dir=['.\',ImagrRelPath];
    DisplayMsg(['File ',[FileFullPath,'\',FileS.ImgFiles(idx).FileName]],hDisplay);
    
    OrgThumbFile=[FileS.ImgFiles(idx).ThumbDir,'\',FileS.ImgFiles(idx).ThumbFile];
    OrgSmlThumbFile=[FileS.ImgFiles(idx).ThumbDir,'\',FileS.ImgFiles(idx).SmlThumbFile];
    
    [FileS.ImgFiles(idx).ThumbFile,FileS.ImgFiles(idx).ThumbDir,Dummy,DummyX,DummyY]=...
           ThumbSet(OrgThumbFile,FileS.ImgFiles(idx).FileName,...
                   FileS.ImgFiles(idx).ThumbFile,...
                   '-T',0,0,0,[],BackupDir,ThumbRelPath);


    
    [FileS.ImgFiles(idx).SmlThumbFile,FileS.ImgFiles(idx).SmlThumbDir,Dummy1,FileS.ImgFiles(idx).SmlThumbX,FileS.ImgFiles(idx).SmlThumbY]=...
        ThumbSet(OrgSmlThumbFile,FileS.ImgFiles(idx).FileName,...
        FileS.ImgFiles(idx).SmlThumbFile,...
        '-TS',SmlIconSize,FileS.ImgFiles(idx).SmlThumbX,FileS.ImgFiles(idx).SmlThumbY,[],BackupDir,ThumbRelPath);


    
    
    FcaeCount=0;
    
    
    for j=1:length(FaceS.FaceDat)
        if strcmp(FaceS.FaceDat(j).FileName,FileS.ImgFiles(idx).FileName)
            FcaeCount=FcaeCount+1;
            FaceS.FaceDat(j).Dir        = FileS.ImgFiles(idx).Dir;
            OrgThumbFile                = [FaceS.FaceDat(j).ThumbDir,'\',FaceS.FaceDat(j).ThumbFile];
            OrgSmlThumbFile                = [FaceS.FaceDat(j).SmlThumbDir,'\',FaceS.FaceDat(j).SmlThumbFile];
            [FaceS.FaceDat(j).ThumbFile,FaceS.FaceDat(j).ThumbDir,CopyThumb,DummyX,DummyY]=ThumbSet(...
                          OrgThumbFile,FileS.ImgFiles(idx).FileName,...
                          FaceS.FaceDat(j).ThumbFile,...
                          ['-',num2str(FcaeCount)],0,0,0,CopyThumb,BackupDir,ThumbRelPath);

        [FaceS.FaceDat(j).SmlThumbFile,FaceS.FaceDat(j).SmlThumbDir,CopyThumb,FaceS.FaceDat(j).SmlThumbX,FaceS.FaceDat(j).SmlThumbY]=ThumbSet(...
                          OrgSmlThumbFile,FileS.ImgFiles(idx).FileName,...
                          FaceS.FaceDat(j).SmlThumbFile,...
                          ['-S',num2str(FcaeCount)],SmlIconSize,FaceS.FaceDat(j).SmlThumbX,FaceS.FaceDat(j).SmlThumbY,CopyThumb,BackupDir,ThumbRelPath);

        end
    end
end

%sort to directories
if ~isempty(FileS.ImgFiles)
    DirList{1}=FileS.ImgFiles(1).Dir;
    MatchDir{1}=1;
    MatchDirFace{1}=[];
    for i=2:length(FileS.ImgFiles)
        Comp=strcmp(DirList,FileS.ImgFiles(i).Dir);
        Idx=find(Comp==1);
        if isempty(Idx)
            DirList{end+1}=FileS.ImgFiles(i).Dir;
            MatchDir{length(DirList)}=i;
            MatchDirFace{length(DirList)}=[];
        else
            MatchDir{Idx}=[MatchDir{Idx},i];
        end
    end
    
    for j=1:length(FaceS.FaceDat)
        Comp=strcmp(DirList,FaceS.FaceDat(j).Dir);
        Idx=find(Comp==1);
        if ~isempty(Idx);
            MatchDirFace{Idx}=[MatchDirFace{Idx},j];
        end
    end
    
    for i=1:length(FileS.ImgFiles)
        Find=strfind(FileS.ImgFiles(i).FileName,'=');
        if ~isempty(Find)
            TmpName=FileS.ImgFiles(i).FileName;
            FileS.ImgFiles(i).FileName(Find)='_';
            movefile([BackupDir,FileS.ImgFiles(i).Dir(2:end),'\',TmpName],[BackupDir,FileS.ImgFiles(i).Dir(2:end),'\',FileS.ImgFiles(i).FileName]);
        end
    end
    
    for i=1:length(FaceS.FaceDat)
        Find=strfind(FaceS.FaceDat(i).FileName,'=');
        if ~isempty(Find)
            FaceS.FaceDat(i).FileName(Find)='_';
            TmpName=FaceS.FaceDat(i).ThumbFile;
            Find=strfind(TmpName,'=');
            if ~isempty(Find)
                FaceS.FaceDat(i).ThumbFile(Find)='_';
                movefile([BackupDir,FaceS.FaceDat(i).ThumbDir(2:end),'\',TmpName],[BackupDir,FaceS.FaceDat(i).ThumbDir(2:end),'\',FaceS.FaceDat(i).ThumbFile]);
            end
        end
    end
    
    for i=1:length(DirList)
        ImagrRelPath=DirList{i}(3:end);
        DisplayMsg(['DB for dir ',ImagrRelPath],hDisplay);
        
        
        
        if ~isempty(MatchDirFace{i})
            FaceSD.FaceDat=FaceS.FaceDat(MatchDirFace{i});
            
            
            StructMatch.FaceDat.Non=[]; % append line;
            if exist([BackupDir,'\',ImagrRelPath,'\','DB_Faces.xls'],'file'); % replace any existing DB dile with the current one.
                delete([BackupDir,'\',ImagrRelPath,'\','DB_Faces.xls'])
            end
            StructOut=ExelInt('Update',[BackupDir,'\',ImagrRelPath,'\','DB_Faces'],FaceSD,StructMatch,[]);
            if ~exist([BackupDir,'\',ImagrRelPath,'\','DB_Faces.xls'],'file')
                a=1;
            end
            
            copyfile([BackupDir,'\',ImagrRelPath,'\','DB_Faces.xls'],[BackupDir,'\',ImagrRelPath,'\',[date,'DB_Faces.xls']]);
        end
        
        if ~isempty(MatchDir{i})
            FileSD.ImgFiles=FileS.ImgFiles(MatchDir{i});
            StructMatch.ImgFiles.Non=[]; % append line;
            if exist([BackupDir,'\',ImagrRelPath,'\','DB_Images.xls'],'file'); % replace any existing DB dile with the current one.
                delete([BackupDir,'\',ImagrRelPath,'\','DB_Images.xls']);
            end
            StructOut=ExelInt('Update',[BackupDir,'\',ImagrRelPath,'\','DB_Images'],FileSD,StructMatch,[]);
            copyfile([BackupDir,'\',ImagrRelPath,'\','DB_Images.xls'],[BackupDir,'\',ImagrRelPath,'\',[date,'DB_Images.xls']]);
        end
    end
end


function [ImagrRelName,name,ext]=CreateRelPath(ImageFile,BaseRelDir,Uniq)

ImageDir=[];
[pathstr, name, ext] = fileparts(ImageFile);

BaseRelDir=[BaseRelDir,'\'];
    
B=strfind(pathstr,BaseRelDir);
if~isempty(B) % the directory of the images has the same base name in the tree
    %then we place it in the same hirarchy under the base
    ImageDir=ImageFile(B+length(BaseRelDir):end);
else % we place it direcly under the base
    f=strfind(ImageFile(1:end-1),'\');
    if ~isempty(f)
        ImageDir=ImageFile(f(end)+1:end);
    end
    
end
if ~isempty(ImageDir) && ImageDir(end)=='\'
    ImageDir=ImageDir(1:end-1);
end

ImagrRelName=[ImageDir,'\',Uniq];


function FaceDat=UpdateFaceRect(FaceDatIn,BoxRel,ImgSize)
FaceDat=FaceDatIn;
Box=BoxRel.*[ImgSize(2),ImgSize(1),ImgSize(2),ImgSize(1)];
FaceDat.FaceBoxRelX=BoxRel(1);
FaceDat.FaceBoxRelY=BoxRel(2);
FaceDat.FaceBoxRelW=BoxRel(3);
FaceDat.FaceBoxRelH=BoxRel(4);
FaceDat.FaceBoxX=Box(1);
FaceDat.FaceBoxY=Box(2);
FaceDat.FaceBoxW=Box(3);
FaceDat.FaceBoxH=Box(4);

function FaceDat=UpdateFaceInfo(FaceDatIn,FaceInfo,ImgSize)
FaceDat=FaceDatIn;
FaceDat.RightEyeRelX=FaceInfo.reye(1);
FaceDat.RightEyeRelY=FaceInfo.reye(2);
FaceDat.RightEyeX=FaceInfo.reye(1)*ImgSize(2);
FaceDat.RightEyeY=FaceInfo.reye(2)*ImgSize(1);
FaceDat.LeftEyeRelX=FaceInfo.leye(1);
FaceDat.LeftEyeRelY=FaceInfo.leye(2);
FaceDat.LeftEyeX=FaceInfo.leye(1)*ImgSize(2);
FaceDat.LeftEyeY=FaceInfo.leye(2)*ImgSize(1);
FaceDat.MouthRelX=FaceInfo.mouth(1);
FaceDat.MouthRelY=FaceInfo.mouth(2);
FaceDat.MouthX=FaceInfo.mouth(1)*ImgSize(2);
FaceDat.MouthY=FaceInfo.mouth(2)*ImgSize(1);
FaceDat.Conf=FaceInfo.conf;
FaceDat.Pan=FaceInfo.pan;




function [ThumbFile,ThumbDir,CopyStat,X,Y]=ThumbSet(OrgThumbFile,DstImgFile,DstThumbFile,Postfix,MaxSize,X,Y,CopyStat,BackupDir,ThumbRelPath)

if exist(OrgThumbFile,'file')==2
        [pathstr, Name, ext]        = fileparts(DstImgFile);
        
        [pathstr, Tname, Text] = fileparts(DstThumbFile);
        ThumbFile                   = [Name,Postfix,Text];
        ThumbRelFile                = [ThumbRelPath,'\',ThumbFile];
        
        if ~isempty(CopyStat) && ~strcmp(CopyStat(1:4),'Alwa')
            if exist([BackupDir,'\',ThumbRelFile],'file')
                CopyStat=questdlg(sprintf('Thumb %s already exist in DB, over write exisitnig DB Thumb Image?',DstImgFile),...
                    'Copy Thumbnail files to DB','Always Skip','Always Overwrite','Always Overwrite');
            else
                CopyStat='Overwrite';
            end
        end
        
        if isempty(CopyStat) || strcmp(CopyStat,'Overwrite') || strcmp(CopyStat,'Always Overwrite')
            if MaxSize>0 && (X>MaxSize || Y>MaxSize)
                Scale=MaxSize/max(X,Y);
                Img=imread(OrgThumbFile);
                Img=imresize(Img,Scale);
                imwrite(Img,[BackupDir,'\',ThumbRelFile]);
                Size=size(Img);
                Y=Size(1);
                X=Size(2);
            else
                
                copyfile(OrgThumbFile,[BackupDir,'\',ThumbRelFile]);
            end
        end
        ThumbDir=['.\',ThumbRelPath];
        
    else
        ThumbDir='';
        ThumbFile='';
end

% function [ImgDat, FaceDat]=InitStruct()
% 
% ImgDat.FileName=[];
% ImgDat.Dir=[];
% ImgDat.SizeX=[];
% ImgDat.SizeY=[];
% ImgDat.ThumbFile=[];
% ImgDat.ThumbDir=[];
% ImgDat.ThumbX=[];
% ImgDat.ThumbY=[];
% ImgDat.NoOfFaces=0;
% 
% FaceDat.FileName=[];
% FaceDat.Dir=[];
% FaceDat.SizeX=[];
% FaceDat.SizeY=[];
% FaceDat.ThumbFile=[];
% FaceDat.ThumbDir=[];
% FaceDat.ThumbX=[];
% FaceDat.ThumbY=[];
% FaceDat.FaceBoxRelX=[];
% FaceDat.FaceBoxRelY=[];
% FaceDat.FaceBoxRelW=[];
% FaceDat.FaceBoxRelH=[];
% FaceDat.FaceBoxX=[];
% FaceDat.FaceBoxY=[];
% FaceDat.FaceBoxW=[];
% FaceDat.FaceBoxH=[];
% FaceDat.RightEyeRelX=[];
% FaceDat.RightEyeRelY=[];
% FaceDat.RightEyeX=[];
% FaceDat.RightEyeY=[];
% FaceDat.LeftEyeRelX=[];
% FaceDat.LeftEyeRelY=[];
% FaceDat.LeftEyeX=[];
% FaceDat.LeftEyeY=[];
% FaceDat.MouthRelX=[];
% FaceDat.MouthRelY=[];
% FaceDat.MouthX=[];
% FaceDat.MouthY=[];
% FaceDat.Conf=[];
% FaceDat.Pan=[];
% FaceDat.FaceQuality=[];